#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app   = require('../app');
var debug = require('debug')('newsscraper:server');
var http  = require('http');

/**
 * Get Port from environment and store in Express.
 */

var Port = normalizePort(process.env.Port || '3000');
app.set('Port', Port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided Port, on all network interfaces.
 */

server.listen(Port, function(){
  console.log("listening on Port:", Port)
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a Port into a number, string, or false.
 */

function normalizePort(val) {
  var Port = parseInt(val, 10);

  if (isNaN(Port)) {
    // named pipe
    return val;
  }

  if (Port >= 0) {
    // Port number
    return Port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof Port === 'string'
    ? 'Pipe ' + Port
    : 'Port ' + Port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'Port ' + addr.Port;
  debug('Listening on ' + bind);
}
